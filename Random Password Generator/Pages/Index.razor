@page "/"
@inject IJSRuntime JS



<div class="centered-container">
    <div class="container text-center">

        <div class="row">
            <div class="col">
                <h1 style="font-weight: bold; font-size: 45px; margin-bottom: 0;">Random </h1>
                <h1>Password Generator</h1>
                <div style="border-top: 1px solid white; padding-bottom: 25px;"></div>
            </div>
            
        </div>


        <div class="row">
              <div class="input-group">

                  <input type="text" class="form-control" value="@generatedPassword" readonly>
                  <button class="btn btn-outline-secondary" @onclick="CopyToClipboard">
                      <i class="fas fa-copy"></i>
                  </button>
              </div>

            <div class="d-flex justify-content-between mb-3" style="padding-top: 5px;">
                <div class="password-strength-bar" style="background-color: @FirstBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @SecondBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @ThirdBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @FourthBarColor;"></div>
            </div>

            <div class="pass-length">
                <div class="details">
                    <label class="title">PASSWORD LENGTH</label>
                    <span>@PasswordLength</span>
                </div>
                <input type="range" class="form-range" min="8" max="20" @bind="PasswordLength" @oninput="GeneratePassword">
            </div>

            <label class="title" style="padding-top: 20px; padding-bottom: 10px;">PASSWORD SETTINGS</label>
            <div class="password-settings">

                <div class="password-settings">
                    <input class="form-check-input" type="checkbox" @bind="IncludeLowercase" @onclick="GeneratePassword" id="lowercaseSwitch" disabled>
                    <label class="form-check-label" for="lowercaseSwitch">LOWERCASE LETTERS (a-z)</label>

                    <input class="form-check-input" type="checkbox" @bind="IncludeUppercase" @onclick="GeneratePassword" id="uppercaseSwitch">
                    <label class="form-check-label" for="uppercaseSwitch">UPPERCASE LETTERS (A-Z)</label>

                    <input class="form-check-input" type="checkbox" @bind="IncludeNumbers" @onclick="GeneratePassword" id="numbersSwitch">
                    <label class="form-check-label" for="numbersSwitch">NUMBERS (0-9)</label>

                    <input class="form-check-input" type="checkbox" @bind="IncludeSymbols" @onclick="GeneratePassword" id="symbolsSwitch">
                    <label class="form-check-label" for="symbolsSwitch">SYMBOLS (#$!)</label>
                </div>
                
            </div>
        </div>
    </div>
    
</div>

<style>

    .container {
        width: 450px;
        height: 480px;
        background: linear-gradient(135deg, #76b5c5 0%, #9f86c0 100%);
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
        color: #333;
    }

    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #2d3142;
    }

    h1 {
        font-size: 30px;
        color: #f8f9fa;
        text-transform: uppercase;
        letter-spacing: 2px;
        margin-bottom: 20px;
    }

    input[type="text"] {
        background-color: #f8f9fa;
        border: 2px #4a4e69;
        padding: 10px;
        border-radius: 10px;
        font-size: 16px;
        color: #333;
        width: 100%;
    }

    button {
        background-color: #ff477e;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 50px;
        font-size: 12px;
        text-transform: uppercase;
        box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

        button:hover {
            background-color: #ff1d68;
            transform: translateY(-2px);
            box-shadow: 2px 6px 15px rgba(0, 0, 0, 0.3);
        }

    input[type="range"] {
        -webkit-appearance: none;
        width: 100%;
        height: 5px;
        background: #ffd166;
        border-radius: 5px;
        outline: none;
        opacity: 0.9;
        transition: opacity .15s ease-in-out;
    }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            background: #ff477e;
            border-radius: 50%;
            cursor: pointer;
        }

    .password-strength-bar {
        width: 30%;
        height: 4px;
        margin: 0 5px;
        background-color: #e0e0e0;
        border-radius: 5px;

    }


    .pass-length {
        padding-top: 10px;
    }

    .details {
        display: flex;
        justify-content: space-between;
    }


    .password-settings {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 10px 15px; 
        align-items: center;
    }
    label {
        font-size: 14px;
        color: #f8f9fa;
        text-align: left;
        font-weight: bold;
    }

    .form-check-input {
        width: 40px;
        height: 20px;
        background-color: #ccc;
        border-radius: 50px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
    }

    .form-check-input:checked {
        background-color: #06d6a0;
    }


    .form-check-label {
        margin-left: 10px;
        font-size: 14px;
        color: #fff;

    }
</style>

@code {
    private string generatedPassword = "";
    private int PasswordLength = 8;
    private bool IncludeUppercase = false;
    private bool IncludeLowercase = true;
    private bool IncludeNumbers = false;
    private bool IncludeSymbols = true;
    private string FirstBarColor = "#ccc";
    private string SecondBarColor = "#ccc";
    private string ThirdBarColor = "#ccc";
    private string FourthBarColor = "#ccc";

    private readonly string uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private readonly string lowercaseChars = "abcdefghijklmnopqrstuvwxyz";
    private readonly string numberChars = "0123456789";
    private readonly string symbolChars = "!@$%^&*()_+[]{}|;:,.<>?";

    protected override void OnInitialized() {
        GeneratePassword();
    }

    public void GeneratePassword() {
        var random = new Random();
        string characterPool = "";

        if (IncludeUppercase) characterPool += uppercaseChars;
        if (IncludeLowercase) characterPool += lowercaseChars;
        if (IncludeNumbers) characterPool += numberChars;
        if (IncludeSymbols) characterPool += symbolChars;

        if (string.IsNullOrEmpty(characterPool)) {
            generatedPassword = "Please select at least one option!";
            return;
        }

        var password = new char[PasswordLength];
        for (int i = 0; i < PasswordLength; i++) {
            password[i] = characterPool[random.Next(characterPool.Length)];
        }

        generatedPassword = new string(password);
        EvaluatePasswordStrength();
    }

    private void EvaluatePasswordStrength() {

        int strengthScore = 0;

        if (PasswordLength <= 8) {
            strengthScore = 1;
        } 
        else if (PasswordLength <= 12) 
        {
            strengthScore = 2;
        }
        else if (PasswordLength <= 15)
        {
            strengthScore = 3;
        } else {
            strengthScore = 4;
        }

        switch (strengthScore)
        {
            case 1:
                FirstBarColor = "#ff5631";
                SecondBarColor = ThirdBarColor = FourthBarColor = "#ccc";
                break;
            case 2:
                FirstBarColor = SecondBarColor = "#ffff00";
                ThirdBarColor = FourthBarColor = "#ccc";
                break;
            case 3:
                FirstBarColor = SecondBarColor = ThirdBarColor = "#ffcd00";
                FourthBarColor = "#ccc";
                break;
            case 4:
                FirstBarColor = SecondBarColor = ThirdBarColor = FourthBarColor = "#23ff00";
                break;

        }
    }

    private async Task CopyToClipboard() {
        await JS.InvokeVoidAsync("copyToClipboard", generatedPassword);
    }
}

<script>
    window.copyToClipboard = (text) => {
        navigator.clipboard.writeText(text)
            .then(() => alert('Password copied to clipboard!'))
            .catch(err => console.error('Error copying to clipboard: ', err));
    }
</script>
