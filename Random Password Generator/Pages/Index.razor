@page "/"
@inject IJSRuntime JS

<div class="centered-container" style="padding: 0 25px;">
    <div class="container text-center" >
        <div class="row" >
            <div class="col">
                <a href="https://haonguyen.netlify.app/" class="home-icon">
                    <i class="fas fa-home"></i>
                </a>
                <h1 style="font-weight: bold; font-size: 45px; margin-bottom: 0;">Random </h1>
                <h1>Password Generator</h1>
                <div style="border-top: 1px solid white; padding-bottom: 25px;"></div>
            </div>
        </div>

        <div class="row">
            <div class="input-group">
                <input type="text" class="form-control" value="@generatedPassword" readonly>
                <button class="btn btn-outline-secondary" @onclick="CopyToClipboard">
                    <i class="fas fa-copy"></i>
                </button>
            </div>

            <div class="d-flex justify-content-between mb-3" style="padding-top: 5px;">
                <div class="password-strength-bar" style="background-color: @FirstBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @SecondBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @ThirdBarColor;"></div>
                <div class="password-strength-bar" style="background-color: @FourthBarColor;"></div>
            </div>

            <div class="pass-length">
                <div class="details">
                    <label class="title">PASSWORD LENGTH</label>
                    <span style="color: white;">@PasswordLength</span>
                </div>
                <!-- Created a new method called OnSliderChange and uses Razor oninput to solve the issue we had with onclick 
                 that passwordlength where that the action didnt take place until after an additional action. Now the slider
                 updates the strength bar in real time instead of until we let go of the slider and then make an additional slider move -->
                <input type="range" class="form-range" min="8" max="20" value="@PasswordLength" @oninput="OnSliderChanged"> 

            </div>

            <label class="title" style="padding-top: 20px; padding-bottom: 10px;">PASSWORD SETTINGS</label>
            <div class="password-settings">

                <!-- Create a new method OncheckboxChange and we use onchange instead of onclick. Here we also that the issue that the password
                were incorrectly updated until an addtiona action took place. So it made it look not as dynamic 
                and onchange changes that because it immediately triggers after the checkbox bool value chagnes-->
                <div class="password-settings">
                    <input class="form-check-input" type="checkbox" checked="@IncludeLowercase" @onchange="(e) => OnCheckboxChanged(e, nameof(IncludeLowercase))" id="lowercaseSwitch" disabled>
                    <label class="form-check-label" for="lowercaseSwitch">LOWERCASE LETTERS (a-z)</label>

                    <input class="form-check-input" type="checkbox" checked="@IncludeUppercase" @onchange="(e) => OnCheckboxChanged(e, nameof(IncludeUppercase))" id="uppercaseSwitch">
                    <label class="form-check-label" for="uppercaseSwitch">UPPERCASE LETTERS (A-Z)</label>

                    <input class="form-check-input" type="checkbox" checked="@IncludeNumbers" @onchange="(e) => OnCheckboxChanged(e, nameof(IncludeNumbers))" id="numbersSwitch">
                    <label class="form-check-label" for="numbersSwitch">NUMBERS (0-9)</label>

                    <input class="form-check-input" type="checkbox" checked="@IncludeSymbols" @onchange="(e) => OnCheckboxChanged(e, nameof(IncludeSymbols))" id="symbolsSwitch">
                    <label class="form-check-label" for="symbolsSwitch">SYMBOLS (#$!)</label>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .home-icon i{
        position: absolute;
        top: 20px;
        left: 25px;
        font-size: 24px;
        color: #00f5d4; 
        text-decoration: none;
    }

        .home-icon i:hover {
            color: #ff007f;
            transform: scale(1.1);
            transition: 0.3s ease;
        }

    .container {
        width: 430px;
        height: 520px;
        background: linear-gradient(135deg, #202020 0%, #0d0d0d 100%);
        border-radius: 15px;
        padding: 15px 20px 15px 20px;
        box-shadow: 0 0 10px rgba(91, 93, 92, 0.5);
        color: #e6e6e6; 
    }

    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #0d0d0d; 
    }

    h1 {
        font-family: 'Raleway', sans-serif;
        font-size: 30px;
        color: #e6e6e6; 
        text-transform: uppercase;
        letter-spacing: 2px;
        margin-bottom: 20px;
    }

    input[type="text"] {
        background-color: #1a1a1a; 
        border: 2px solid #00f5d4; 
        padding: 10px;
        border-radius: 10px;
        font-size: 16px;
        color: #e6e6e6; 
        width: 100%;
    }



    button i {
        background-color: #00f5d4; 
        border: none;
        padding: 10px 10px;
        border-radius: 50px;
        font-size: 14px;
        text-transform: uppercase;
        box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
    }

        button i:hover {
            background-color: #ff007f; 
            color: white; 
            transform: translateY(-2px);
            box-shadow: 2px 6px 15px rgba(0, 0, 0, 0.5);
        }

    input[type="range"] {
        -webkit-appearance: none;
        width: 100%;
        height: 5px;
        background: #8338ec; 
        border-radius: 5px;
        outline: none;
        opacity: 0.9;
        transition: opacity 0.15s ease-in-out;
    }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            background: #00f5d4;
            border-radius: 50%;
            cursor: pointer;
        }

    .password-strength-bar {
        width: 30%;
        height: 2px;
        margin: 5px;
        background-color: #e6e6e6; 
        border-radius: 5px;
    }

    .pass-length {
        padding-top: 10px;
    }

    .details {
        display: flex;
        justify-content: space-between;
    }

    .password-settings {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 10px 15px;
        align-items: center;
    }

    label {
        font-family: 'Raleway', sans-serif;
        font-size: 14px;
        color: #e6e6e6; 
        text-align: left;
        font-weight: bold;
    }

    .form-check-input {
        width: 40px;
        height: 20px;
        background-color: #e6e6e6; 
        border-radius: 50px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
    }

        .form-check-input:checked {
            background-color: #00f5d4; 
        }

    .form-check-label {
        margin-left: 10px;
        font-size: 14px;
        color: #e6e6e6; 
    }
</style>

@code {
    private string generatedPassword = "";
    private int PasswordLength = 8;
    private bool IncludeUppercase = true;
    private bool IncludeLowercase = true;
    private bool IncludeNumbers = true;
    private bool IncludeSymbols = true;
    private string FirstBarColor = "#ccc";
    private string SecondBarColor = "#ccc";
    private string ThirdBarColor = "#ccc";
    private string FourthBarColor = "#ccc";
    private readonly string uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private readonly string lowercaseChars = "abcdefghijklmnopqrstuvwxyz";
    private readonly string numberChars = "0123456789";
    private readonly string symbolChars = "!@$%^&*()_+[]{}|;:,.<>?";

    //Generates the password method on program start
    protected override void OnInitialized()
    {
        GeneratePassword();
    }

    //Generates password depending on what checkboxes is checked and then randomizes the characters depending on the password length
    public void GeneratePassword()
    {
        var random = new Random();
        string characterPool = "";

        if (IncludeUppercase) characterPool += uppercaseChars;
        if (IncludeLowercase) characterPool += lowercaseChars;
        if (IncludeNumbers) characterPool += numberChars;
        if (IncludeSymbols) characterPool += symbolChars;

        var password = new char[PasswordLength];
        for (int i = 0; i < PasswordLength; i++)
        {
            password[i] = characterPool[random.Next(characterPool.Length)];
        }

        generatedPassword = new string(password);
        EvaluatePasswordStrength();
    }

    //Updates the strength bar depending on password length
    private void EvaluatePasswordStrength()
    {
        int strengthScore = 0;

        if (PasswordLength <= 9) strengthScore = 1; //Removed brackets since we only have one line of code inside the scope
        else if (PasswordLength <= 13) strengthScore = 2;
        else if (PasswordLength <= 17) strengthScore = 3;
        else strengthScore = 4;

        switch (strengthScore)
        {
            case 1:
                FirstBarColor = "#ff5631";
                SecondBarColor = ThirdBarColor = FourthBarColor = "#ccc";
                break;
            case 2:
                FirstBarColor = SecondBarColor = "#ffff00";
                ThirdBarColor = FourthBarColor = "#ccc";
                break;
            case 3:
                FirstBarColor = SecondBarColor = ThirdBarColor = "#ffcd00";
                FourthBarColor = "#ccc";
                break;
            case 4:
                FirstBarColor = SecondBarColor = ThirdBarColor = FourthBarColor = "#23ff00";
                break;

        }
    }

    //Takes two parameters. ChangeEventArgs e that contains information about the checkbox change event, if the new value is true/false
    //option parameters specifies which option out of the four checkboxes is being updated.
    private void OnCheckboxChanged(ChangeEventArgs e, string option)
    {
        bool isChecked = (bool)e.Value; //Converts the value from the checkbox change event to a boolean


        switch (option)
        {
            case nameof(IncludeLowercase):
                IncludeLowercase = isChecked; //If the option is "IncludeLowercase", set it to the new value (true/false)
                break;
            case nameof(IncludeUppercase):
                IncludeUppercase = isChecked;
                break;
            case nameof(IncludeNumbers):
                IncludeNumbers = isChecked;
                break;
            case nameof(IncludeSymbols):
                IncludeSymbols = isChecked;
                break;
        }

        GeneratePassword();
    }

    private void OnSliderChanged(ChangeEventArgs e)
    {
        PasswordLength = int.Parse(e.Value.ToString()); //Updates passwords length based on slider input
        GeneratePassword(); //Re-generates the password and in turn re-evaluates the password strength => bar colors changes in real time
    }

    private async Task CopyToClipboard() {
        await JS.InvokeVoidAsync("copyToClipboard", generatedPassword);
    }
}

<script>
    window.copyToClipboard = (text) => {
        navigator.clipboard.writeText(text)
            .then(() => alert('Password copied to clipboard!'))
            .catch(err => console.error('Error copying to clipboard: ', err));
    }
</script>
